{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","result":{"data":{"post":{"__typename":"MdxPost","slug":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","title":"DO288 Red Hat OpenShift Development II Containerizing Applications","date":"15.01.2021","tags":[{"name":"Tutorial","slug":"tutorial"},{"name":"OpenShift","slug":"open-shift"},{"name":"Containers","slug":"containers"},{"name":"Kubernetes","slug":"kubernetes"},{"name":"K8s","slug":"k-8-s"}],"description":"Summary notes for my Red Hat Certified Specialist in OpenShift Application Development EX180 Exam","canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"1. Deploying and Managing Applications on OpenShift\"), mdx(\"h2\", null, \"Deploying Applications to OpenShift Cluster\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"After OCP 4.5, oc new-app command creates Deployment instead of DeploymentConfig\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"So we will use $ oc new-app --as-deployment-config during the codes below \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build application from the GitHub\\n$ oc new-app --as-deployment-config \", \"[github link]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Repo contains Dockerfile, so use that instead of S2I\\n$ oc new-app \", \"[github link]\", \" --as-deployment-config --strategy docker \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Registry that contains docker image\\n$ oc new-app -as-deployment-config --docker-image= \", \"[registry link]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Weird cases, what if repo contains dockerfile as well as index.php? OCP cannot decide in that case, you have to help \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc-new app flags\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--code = github link \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--docker-image = registry link for the container image \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--strategy = options: source, docker, pipeline\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--image-stream or -i = use the image in the ImageStream \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--as-deployment-config = use DC instead of Deployment \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"image stream flag in detail: instead of public nginx, use rhel nginx in the image stream for example or directly deploy the image stream \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"strategy flag in detail \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"source means, use github and S2I image builder \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker means, use the Dockerfile in the github repo to build the image and follow my Dockerfile order \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pipeline means use the Jenkinsfile to build the image and deployment \")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"shortcuts for flags that will result in the same outcome\\n$ oc new-app --as-deployment-config \", \"[FLAGS]\", \"\\n*FLAGS COULD BE:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"php~github.repo.link # this tells that use S2I php to build the repo \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-i php github.repo.link \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-i php:8.0 github.repo.link # this uses image version 8.0\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc new-app creates a BuildConfig, ImageStream, Deployment (DeploymentConfiguration with the flag), and a Service, you need to expose the service to create route\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to import docker images to image stream\\n$ oc import-image \", \"[imagename]\", \" --configm --from \", \"[registry link]\", \" --insecure \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc new-app for subfolder of github, use --context-dir for the folder selection \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"how to rebuild an app, that doesn't have auto build trigger?\\n$ oc start-build \", \"[buildconfig name]\"))), mdx(\"h2\", null, \"Managing Applications with CLI\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"open remote shell in a container in the pod alpha\\n$ oc rsh alpha \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"open a remote shell in pod alfa and run ls command\\n$ oc rsh alpha ls \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"copy file into a running container, container must contain tar\\n$ oc cp \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"edit a resource (oc get ... -o yaml + oc apply combo )\\n$ oc edit \"))), mdx(\"h2\", null, \"CH 1 SUMMARY:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ oc new-app --as-deployment-config <git>#<folder> --context-dir <branchname>\\n# if you do not have a dockerfile a suitable s2i will be used, unless you tell one from your imageStream, if you have dockerfile it will use it by default no need to define strategy in this case \\n$ oc new-app --as-deployment-config --docker-image=registry.access.redhat.com/imagename \\n$ oc new-app --as-deployment-config --image-stream=<equivalent-to-S2I-image> --strategy=<source/docker/pipeline> --code=<github.repo> OR --docker-image=<image-repo> \\n$ oc new-app --as-deployment-config -l key=value --name value ENV_VAR_KEY=ENV_VAR_VALUE[NOFLAG]\\n$ oc import-image imagename --config --from registry.link.here --insecure #this will import image to OCP registry\\n$ oc logs bc/name #get the logs from the latest build \\n$ oc logs build/my-app-2 # get the logs from the second build, from the same build config \\n# oc logs myapp-build-2 # get the logs from a pod used to build the app second time \\n$ oc status #to see new-app results\\n$ oc start-build bc_name #starts rebuilding the application, so if you don't have triggers set up, you can manually re-run builds \\n$ oc get templates -n openshift # careful, you need openshift namespace, that's where the default templates are\\n# when troubleshooting, first curl the endpoint see if it is working \\n# then check if pods can see the endpoints: \\n$ oc get ep # get endpoints \\n$ oc describe pod <podname> | grep IP # the ip should match service endpoint \\n# if you are connecting to the db, ensure that credentials are correct \\n# then check if one pod can see the other pod, normally you can go into a pod and ping it but if you don't have it, use curl so \\n$ oc rsh [podname] bash -c 'echo >/dev/tc/$OTHER_SERVICE_NAME/PORT# && echo OK || echo FAIL'\\n# When executing a command on a /dev/tcp/$host/$port pseudo-device file, Bash opens a TCP connection to the associated socket. \\n# if you need to copy a configuration/sql table etc to the pod you can just copy it \\n$ oc cp ~/path/to/file.txt pod-name:/path/to/file.txt #note if it is a file, destination is a file, if it is a folder, destination is a folder\\n\")), mdx(\"h1\", null, \"2. Designing Containerized Applications for OpenShift\"), mdx(\"p\", null, \"Aim: select a containerization method and package it to run on OCP \"), mdx(\"h2\", null, \"Building Container images with Dockerfile\"), mdx(\"h3\", null, \"Advanced Dockerfile Instructions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Concatenate individual and sequential RUN commands such as \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"RUN yum --disablerepo=* --enablerepo=\\\"rhel-7-server-rpms\\\"\\nRUN yum update\\nRUN yum install -y httpd\\nRUN yum clean all -y\\n\")), mdx(\"p\", null, \"into \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"RUN yum --disablerepo=* --enablerepo=\\\"rhel-7-server-rpms\\\" && \\\\\\nRUN yum update && \\\\\\nRUN yum install -y httpd && \\\\\\nRUN yum clean all -y \\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"LABEL instructions distinguish Openshift from Kubernetes by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.openshift\"), \" to your labels \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"common labels, io.openshift.tags, io.k8s.description io.openshift.expose-services\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"io.openshift.expose-services: PORT\", \"[/PROTOCOL]\", \":NAME 8080/tcp:my-deployment; this label contains list of svc ports that match the EXPOSE instructions in the Dockerfile \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Dockerfile best practices for ENV and LABEL: single equal and \\\\ separated \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ENV MYSQL_DATABASE_USER=\\\"my_db_usr\\\" \\\\\\nMYSQL_DATABASE=\\\"mydb\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"LABEL version=\\\"2.0\\\" \\\\\\ndescription=\\\"This is my db image\\\"\\\\\\ncreationDate=\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"USER: that is an important concept. Red Hat recommends running the container as non-root. But OCP does not honour the USER on Dockerfile; it uses a random UID that is not 0 (root)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Building images with ONBUILD instruction. Use ONBUILD on parent container image. So when child refers to parent image via FROM, building the child image will trigger ONBUILD commands for the child container.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Why not just go ahead and use those commands in the child? For ease of consistency. The architect can create set of rules on the parent container, and devs can refer to the parent image instead. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Podman and Buildah does not use ONBUILD as it is not part of OCI spec. \"))), mdx(\"h3\", null, \"Adapting Dockerfiles For OpenShift:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When you write a Dockerfile that builds an image to run on OCP, you need to address:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Directories/files that are read from/written to by processes in the container should be owned by the root group \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Executable files should have executable permissions \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Processes must not listen ion priviliged ports (below 1024)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"so add the following to the dockerfile to deal with the first two \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"RUN chgrp -R 0 [directory/here] && chmod -R g=u [directory/here]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"By default OpenShift Container Platform runs containers using arbitrary User IDs. So the container user does not have Root USER priviliges \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Note that Root User is different from Root Group. Root group does not have priviliged rights, it is only root User that has.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"So for an image to support running as an arbitrary user, it must be part of Root Group. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to change the port to run above 1024 on Dockerfile \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"EXPOSE 8080\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What if I am relying on parent Dockerfile, with ONBUILT?\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# On child dockerfile, i.e. httpd on port 80\\nRUN sed -i \\\"s/Listen 80/Listen 8080/g\\\" /etc/httpd/conf/httpd.conf \\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to change the user id?\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Dont use a name, user number \\nUSER 1001\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running Containers as root Using Security Context Constraints (SCC)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[user@host ~]\", \"$ oc create serviceaccount myserviceaccount\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[user@host ~]\", \"$ oc patch dc/demo-app --patch \\\\\", mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"'{\\\"spec\\\":{\\\"template\\\":{\\\"spec\\\":{\\\"serviceAccountName\\\": \\\"myserviceaccount\\\"}}}}'\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[user@host ~]\", \"$ oc adm policy add-scc-to-user anyuid -z myserviceaccount\")), mdx(\"h2\", null, \"Guided Exercise: Building Container Images with Advanced Dockerfile instructions\"), mdx(\"p\", null, \"Given the following Dockerfile: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"FROM registry.access.redhat.com/ubi8/ubi:8.0 \\n\\nMAINTAINER Red Hat Training <training@redhat.com>\\n\\n# DocumentRoot for Apache\\nENV DOCROOT=/var/www/html \\n\\nRUN   yum install -y --no-docs --disableplugin=subscription-manager httpd && \\\\ \\n      yum clean all --disableplugin=subscription-manager -y && \\\\\\n      echo \\\"Hello from the httpd-parent container!\\\" > ${DOCROOT}/index.html\\n\\n# Allows child images to inject their own content into DocumentRoot\\nONBUILD COPY src/ ${DOCROOT}/ \\n\\nEXPOSE 80\\n\\n# This stuff is needed to ensure a clean start\\nRUN rm -rf /run/httpd && mkdir /run/httpd\\n\\n# Run as the root user\\nUSER root \\n\\n# Launch httpd\\nCMD /usr/sbin/httpd -DFOREGROUND\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Can you create an Apache HTTP server container image using a Dockerfile and deploy it to OCP?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Can you create a child contianer image by extending the parent Apache HTTP Server img? \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Can you update Dockerfile for the child container image so that it runs on OCP with a random user id? \")), mdx(\"p\", null, \"Probably in the exam they would give me a parent container that will have a pre-built parent Dockerfile\\nProbably the parent file will contain USER Root, won't be able to access system files because I haven't changed the owner, running on ports < 1024\\nPossibly may ask me to improve the build efficiency, by combining all RUN commands that are consecutive, as one \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Codes I should know for the DO288:\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"On (child) Dockerfile, \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"EXPOSE 8080\"), \" or ports > 1024\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"On (child) Dockerfile, `LABEL io.openshift.expose-services=\\\"8080:http\\\" to match Dockerfile and automatically understand which port to expose when creating a service (oc expose svc/\", \"[svc-name]\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"By default, Apache httpd server listens on port 80 and configuration file is in /etc/httpd/conf/httpd.conf file, so how do you edit that in child?\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The answer is to edit it on the fly, so you need a script edit to convert httpd configuration that says Listen 80 to Listen 8080\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The way to do that on Linux is via sed, RUN sed -i \\\"s/Listen 80/Listen 8080/g\\\" /etc/httpd/conf/httpd.conf*\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if httpd cannot access the log files, it means that we do not have read/write rights, learn how to change permissions\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RUN chgrp -R 0 /var/log/httpd/ var/run/httpd && chmod -R g=u /var/log/httpd /var/run/httpd\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"and finally USER 1001 or any user that starts from 1000\")), mdx(\"h2\", null, \"How to Inject Configuration Data into Application?\"), mdx(\"h3\", null, \"How to Create Secret / ConfigMaps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to create configmap from literals\\n$ oc create configmap config_map_name --from-literal key1=value1 --fron-literal key2=value2\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to create secret ?\\n$ oc create secret generic secret_name --from-literal username=user1 --from-literal password=password1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to create configmap from a file\\n$ oc create configmap config_map_name --from-file /home/file.txt \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Where file name is the key and values inside the file.txt is the value \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ConfigMap can be shortened as cm \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to create a secret from file ?\\n$ oc create secret generic my_secret --from-file /home/secret.txt \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to edit YAML instead of base64 encoding for the passwords/usernames\\nUse 'stringValue' instead of 'data' for JSON key. See Below for the full example \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"apiVersion: v1 \\nstringValue: #instead of data \\n  username: user1\\n  password: pass1\\nkind: Secret\\nmetadata:\\n  name: my_secret\\n  type: Opaque\\n\")), mdx(\"h2\", null, \"Injecting Secrets and Configuration to Pods\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to inject as env var \")), mdx(\"p\", null, \"$ oc set env dc/mydcname --from configmap/myconfig\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to inject secret as env \")), mdx(\"p\", null, \"$ oc set env dc/mydcname --from secret/mysecret\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to inject cm as volume \")), mdx(\"p\", null, \"$ oc set volume dc/mydcname --add -t configmap -m /var/path --name myvol --configmap-name myconf \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"a lot to unpack, --add is for addition, -t is for type, -m mount path --name is volume name, --configmap-name is obvious \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to inject secret as volume \"))), mdx(\"p\", null, \"$ oc set volume dc/mydcname --add -t secret -m /var/path --name myvol --secret-name mysecret \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"how to prevent dc to rollout for every configmap change (in case multiple provided back to back )\")), mdx(\"p\", null, \"$ oc set triggers dc/mydcname --from-config --remove \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"how to start dc to rollout everytime a change is made \")), mdx(\"p\", null, \"$ oc set triggers dc/mydcname --from-config \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"how to rollout the latest deployment, after configuration changes?\")), mdx(\"p\", null, \"$ oc rollout latest mydcname \"), mdx(\"h1\", null, \"3. Publishing enterprise Container Images\"), mdx(\"h2\", null, \"Managing Images in an Enterprise / Public Registry\"), mdx(\"p\", null, \"Aim:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copy image from one registry to another with Skopeo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deploy the application image from a public or enterprise registry\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To deploy the image you have to create docker pull secret \")))), mdx(\"p\", null, \"Let's begin:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Login to quay.io where we will store the image podman \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman login -u username quay.io\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"copy the oci image to quayio with skopeo \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ skopeo copy oci:/home/folder/path docker://quay.io/user/image:tag \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"inspect the image if you want or search for it or run it locally to ensure that it is running \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ skopeo inspect docker://quay.io/user/image:tag \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman search imagename \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman run imagename \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deploy the image to OpenShift\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"login to OpenShift and create a new project \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you try to deploy the image from an external registry it will fail \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --docker-image quay.io/etc #THIS WILL FAIL BECAUSE OCP NEEDS CREDENTIALS\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a secret \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc create secret generic secretname --from-file .dockerconfigjson=/path/to/auth.json --type kubernetes.io/dockerconfigjson\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if you are using dockercfg as .dockercfg file instead of .docker/config.json file, then type is kubernetes.io/docercfg\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Link the secret \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc secrets link default secretname --for-pull \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now create the application \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --as-deployment-config --name name --docker-image quay.io/image/name:tag \")))), mdx(\"h2\", null, \"Allowing Access to OpenShift Registry\"), mdx(\"p\", null, \"Aim:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Access the OCP Internal Registry with Linux container tools (docker/podman)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You need admin rights to expose the internal container registry \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"OpenShift Image Registry Operator manages the registry and settings are in the cluster config in openshift-image-registry namespace \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To expose the registry \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc patch config cluster -n openshift-image-registry --type merge -p '{\\\"spec\\\":{\\\"defaultRoute\\\":true}}'\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Get the route \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc get routes -n openshift-image-registry \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"login to docker / podman with ocp \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ HOST=$(oc get route default-route -n openshift-image-registry --template='{{ .spec.host }}')\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman/docker login -u $(oc whoami) -p $(oc whoami -t) $HOST\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"inspect with skopeo after podman/docker login\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ skopeo inspect --creds=$(oc whoami):$(oc whoami -t) docker://namespace-route-openshift.domain/namespace/app \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"copy image to ocp registry \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ skopeo copy --dest-creds=$(oc whoami):$(oc whoami -t) SOURCE-IMAGE DESTINATION-IMAGE\")))), mdx(\"h2\", null, \"Creating Image Streams\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"list image streams \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc get is \", \"[-n namespace if you want to see imgs from other ns, -o name if you just want the names ]\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"get the is tag \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc get istag \")))), mdx(\"h3\", null, \"Import Image from Other Repository into OCP Internal Registry\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"import from another registry \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc import-image myis\", \"[:tag]\", \" --confirm --from registry/image:tag \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to update the image stream with the latest from the registry\\n$ $ oc import-image myis\", \"[:tag]\", \" --confirm \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to create image streams from other repos you need pull secrets\"))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"so login with podman to the repo \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"create generic secret \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"import image \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman login -u username -p password registry.link \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc create secret generic registrytokenname --from-file .dockerconfigjson=/path --type kubernetes.io/dockerconfigjson\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc import-image myis:1.0 --confirm --from registry.link\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to deploy the app via is \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --as-deployment-config -i myis:1.0\")), mdx(\"h3\", null, \"Sharing IS between namespaces\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a secret with an access token to the private registry only on the project where you create the image stream\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Configure that image steam with a local reference policy. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Grant rights to use the image stream to service accounts from each project that uses the image steam. \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman login -u user -p password \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-project \", \"[myNewNamespaceThatWillImportImages]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-project \", \"[shared]\", \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc create secret generic regtoken --from-file .dockerconfigjson=/path -t kubernetes.io/dockerconfigjson\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc import is \", \"[myis]\", \" --confirm --reference-policy local --from \", \"[internal.ocp.registry]\", \" # add reference policy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc policy add-role-to-group system:image-puller system:serviceaccounts:\", \"[myNewNamespaceThatWillImportImages]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --as-deployment-config -i shared/\", \"[myis]\", \" \")), mdx(\"h1\", null, \"4. Building Applications\"), mdx(\"h2\", null, \"4.1 Describe the OCP Build Process\"), mdx(\"h3\", null, \"Build Strategies in OCP\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pipeline \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Docker \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Custom \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Pipeline build creates a new Jenkins server, subsequent builds share the same jenkins server \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Docker requires dockerfile, runs on buildah base img in a pod \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Custom is custom \"))), mdx(\"h3\", null, \"Build Input Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dockerfile : self explanatory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Git : repo name \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image : if you are building from an img \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binary : Stream binary content from a local Filesystem to the builder \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input secrets \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"External artifacts : Allow copying binary files to the build \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"That said most common one is build with Dockerfile in Git repo \")), mdx(\"h3\", null, \"Build Config Resource\"), mdx(\"p\", null, \"Build Config Sets triggers when the image should be rebuilt \"), mdx(\"h2\", null, \"4.2 Managing App Build\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You got 2 options, oc new-app or YAML \")), mdx(\"h3\", null, \"Build Config using CLI\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"oc start-build \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc start-build name \")))), mdx(\"h2\", null, \"4.5 Trigger Build\"), mdx(\"h3\", null, \"Defining Build Triggers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"you got 2 options \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"img change \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"webhook \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"if the parent img changes, img change trigger \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"use webhook to trigger new builds once the code is changed \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to add trigger to a build config use set triggers \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to trigger if the parent img changes\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc set triggers bc/name --from-image=project/image:tag \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to stop trigger just add --delete flag to the end from the trigger \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"for webhook trigger you MUST define a SECRET, with a KEY: 'WebHookSecretKey' \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc new-app creates git and generic secrets to use, just take the secrets and add to your VCS \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"if you want github/gitlab or bitbucket you can just add --from-...\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"oc set triggers bc/name --from-github \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to remove just add --delete flag \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to build images from source images, such as my custom php 7.0, you need to be able to pull the image and build it \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"service account builder does that for you, just need to add secret and link to it so the robot has the rights \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc create secret generic secret-name --from.file .dockerconfigjson=/path/ --type kubernetes.io/dockerconfigjson \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc secrets link builder secret-name \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"then import the image \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc import-image imgname --from quay.io/path --confirm \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"then create the new app, if you import-image to your internal registry with a new base, then it will re trigger build \"))), mdx(\"h2\", null, \"4.7 Implementing Post-commit build hook\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once the app is built and img is deployed you can run post build hooks one example is to run a script post build \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc set build-hook bc/name --post-commit --script=\\\"curl \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://slack.com/push/notification%22\"\n  }), \"http://slack.com/push/notification\\\"\"))))), mdx(\"h1\", null, \"5. Customize S2I Build\"), mdx(\"h2\", null, \"5.1 Describe the S2I Arch\"), mdx(\"h2\", null, \"5.3 Cusomize the S2I Base Image\"), mdx(\"h2\", null, \"5.5 Create an S2I builder Img\"), mdx(\"h1\", null, \"6. Create Apps from OCP Template\"), mdx(\"h2\", null, \"6.1 Describe the Elements of a Template\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"OCP Template is the Helm Chart for Kubernetes \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"why use templates? Software Vendor to deploy all at once or multi tier application for testing environment (web/backend/db)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The only difference is: template uses 'objects' instead of 'spec'\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the template you can inject params too and a common label for all objects\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"also you can inject random default params/values too, see the YAML below \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"apiVersion: template.openshift.io/v1\\nkind: Template \\nmetadata: \\n  name: mytemp \\n  annotations:\\n    description: \\\"Descibe here\\\"\\n\\nobjects:\\n- apiVersion: v1\\n  kind: Pod \\n  # does that look familiar?\\n  spec:\\n    containers:\\n    #bla bla \\n    name: ${MYPARAM}\\n\\n#params to be injected to the objects\\nparameters: \\n  - name: MYPARAM\\n    value: delta \\n    required: true \\n    description: \\\"describe the reason here\\\" \\n\\n  - name: APIKEY\\n    generate: expression \\n    from: \\\"[a-zA-Z0-9]{12}\\\"\\n    description: random string generated by the template at run time \\n#labels for the resources \\nlabels:\\n  mylabel: myapp\\n\")), mdx(\"p\", null, \"$ oc get templates -n openshift \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to view the params for the template \")), mdx(\"p\", null, \"$ oc process --parameters -n openshift nodejs-mongdb-template \"), mdx(\"h2\", null, \"6.3 Create a Multicontainer template\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Question for this section could be create a multi container template from existing resources \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"use the following to export all objects as a template. Very Important! \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc get -o yaml --export secret, is,bc,dc,svc,route, pvc > mytemplate.yaml \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"order is important, secrets first don't wait for them, pvc last because it takes time to bind \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To describe OpenShift resouce type use oc explain routes, to get nested level response oc explain routes.spec \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc new-app and oc process uses templates to create Applications from Templates;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to pass parameters to oc new-app add -p flag \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --file mytemplate.yaml -p PARAM1=value1 -p PARAM2=value2\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to create a template with oc process with params, you need to send to a yaml file first then use oc create to deploy\\n$ oc process -f mytemplate.yaml -p PARAM1=value1 > myresourcelist.yaml\\n$ oc create -f myresourcelist.yaml \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"or your can just pipe it \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc process -f mytemplate.yaml -p PARAM1=value1 | oc create -f -\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To find which params you need to pass to template \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"oc process -f mytemplate.yaml --parameters \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"OpenShift recommends oc new-app rather than oc process\"))), mdx(\"p\", null, \"Potential Exam Questions: Creating MultiContainer \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a template from a running application \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Clean the template to remove runtime information (manually delete info from YAML)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add parameters to a template \\\"remember the -p flag?\\\"\")), mdx(\"p\", null, \"When you try to export multiple items but get an error, you can just add one by one and append to a file\"), mdx(\"p\", null, \"$ oc get -o yaml is --export > /tmp/is.yaml\\n$ cp /tmp/is.yaml /tmp/is-clean.yaml \"), mdx(\"p\", null, \"TODO: COMPLETE THE GUIDED EXERCISE!\"), mdx(\"h1\", null, \"7. Managing App Deploy\"), mdx(\"h2\", null, \"7.1 Monitor the health\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Liveliness and readiness \")), mdx(\"h3\", null, \"OpenShift Readiness and Liveliness Probes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Five options to check Liveliness and Readiness\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"initialDelaySeconds \", \"[mandatory]\", \" How long to wait after the container starts before beginning the probe \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"timeoutSeconds \", \"[mandatory]\", \" How long to wait for the probe to finish. If exceeded, probe fails \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"periodSeconds How many times to check \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"successThreshold : minimum consecutive success to be considered successful \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"failureThreshold : ditto for failure \")), mdx(\"h3\", null, \"Methods to check\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Three ways to check \")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"HTTP Checks \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Container Execution Check \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"TCP Socket Check \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HTTP Check \", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"...\\nlivelinessProbe:\\n  httpGet:\\n    path: /health\\n    port: 8080 \\n  initialDelaySeconds: 10\\n  timeoutSeconds: 1\\n\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"* When to use HTTP Check: When you have a REST API and apps that can return HTTP Status code \\n\\n* Container Exec Check \\n\")), mdx(\"p\", null, \"...\\nlivelinessProbe:\\nexec:\\ncommand:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"- cat \\n- /tmp/health \\n\")), mdx(\"p\", null, \"  initialDelaySeconds: 10\\ntimeoutSeconds: 1\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\n* When to run Container Exec Check: When container runs a process or shell script running in the container \\n\\n* TCP Socket Check \\n\")), mdx(\"p\", null, \"...\\nlivelinessProbe\\ntcpSocket:\\nport: 8080\\ninitialDelaySeconds: 15\\ntimeoutSeconds: 1\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\n* When to run TCP Socket Check: When you run deamons and open TCP ports: DB Servers, APP Servers, File Servers, Web Servers etc. \\n\\n\\n* How to set probes on the UI? open up the YAML and edit \\n\\n* How to set probes on the CLI? \\n  * $ oc set probe dc/myapp --readiness --get-url=http://:8080/healthz --period=20 \\n  * $ oc set probe dc/myapp --liveliness --open-tcp=3306 --period=20 --timeout-seconds=1\\n  * $ oc set probe --help to learn more \\n\\nTODO: complete the demo\\n\\n## 7.3 Seelct Appropriate Deploy Strategy \\n\\n### Deployment Strategies \\n\\n* A deployment strategy is a method of changing or upgrading an app \\n\\n* Two Deployment Strategies: Deployment Configuration for the deployment strategy and other one is use Router to route to certain pods; \\n\\n  * For Deployment Strategy you can use Rolling or Recrate\\n  * For Route AB Deployment, Blue-Green, N-1 Compatibility, Graceful Termination \\n  * Let's first talk about Deployment Strategies then Router below\\n\\n* Deployment Strategies\\n\\n* This is the default if you do nothing \\n\\n* It uses readiness probes to see, and it is a canary deployment, deploy one to test, if doesn't work do not deploy \\n\\n* Recrate: When you use PVs with RWO access which does not allow writes from multiple pods, then you should use Recrate, sorry dude \\n\\n* Life-cycle hooks with deployment strategies: \\n  * Both deployment strategies work with LC Hooks \\n  * Pre/Mid/Post LC hooks are executed during the deployments \\n  * Each Hook has failurePolicy that you can run when a hook fails. You can Abort/Retry or Ignore \\n\\n\\n\\n\\n\\n## 7.5 Manage App Deploy with CLI \\n\\n# 8. CI/CD Pipelines \\n\\n## 8.3 Implement Jenkins \\n\\n## 8.5 Custom Jenkins Pipeline \\n\\n# 9. Building Apps for Openshift \\n\\n## 9.1 Integrating External Services \\n\\n## 9.3 Containerize Svc \\n\\n## 9.5 Deploy Apps with OCP Runtimes \\n\\n# End\\n\\n\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"DO288 Red Hat OpenShift Development II Containerizing Applications\\\",\\\"date\\\":\\\"2021-01-15T00:00:00.000Z\\\",\\\"description\\\":\\\"Summary notes for my Red Hat Certified Specialist in OpenShift Application Development EX180 Exam\\\",\\\"tags\\\":[\\\"Tutorial\\\",\\\"OpenShift\\\",\\\"Containers\\\",\\\"Kubernetes\\\",\\\"K8s\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"1. Deploying and Managing Applications on OpenShift Deploying Applications to OpenShift Cluster After OCP 4.5, oc new-app command creates…","timeToRead":10,"banner":null}},"pageContext":{"slug":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}